C-
POD Design
--------------------

1-

kubectl run nginx1 --image=nginx --restart=Never --labels=app=v1
kubectl run nginx2 --image=nginx --restart=Never --labels=app=v1
kubectl run nginx3 --image=nginx --restart=Never --labels=app=v1

2-
kubectl  get po --show-label

3-
kubectl label po nginx2 app=v2 --overwrite

 
4-
k get po -L app 

5- 
k get po -l app=v2

6-
 k label po nginx{1..3} app-
OR
k label po nginx1 nginx2 nginx3 app-

7- 
 
# Create YAML

apiVersion: v1
kind: Pod
metadata:
  name: nsel-test
spes:
  containers:
    - name: nsel-test
      image: "k8s.gcr.io/cuda-vector-add:v0.1"
  nodeSelector:
    accelerator=nvidia-tesla-p100

# you can check 

kubectl explain po.spec


8-
 
kubectl annotate po nginx{1..3} description='my description'

9-
 
kubectl describe po nginx1 | grep -i 'annotation'

OR 

kubectl describe po nginx1 | -o jsonpath='{.metadata.annotations}{"\n"}'


10-
kubectl annotate po nginx{1..3} description-


 
11-
kubectl delete po nginx{1..3}

Deployments
12-
kubectl run nginx --image=nginx:1.7.8 --replicas=2 --port=80 

OR

kubectl create deployment nginx  --image=nginx:1.7.8  --dry-run -o yaml > deploy_c12.yaml
vi deploy.yaml
# change the replicas field from 1 to 2
# add this section to the container spec and save the deploy.yaml file
# ports:
#   - containerPort: 80
kubectl apply -f deploy.yaml


13-
 kubectl get deploy nginx -o yaml


14-
kubectl describe deploy nginx # you'll see the name of the replica set on the Events section and in the 'NewReplicaSet' property
# OR you can find rs directly by:
kubectl get rs -l run=nginx # if you created deployment by 'run' command
kubectl get rs -l app=nginx # if you created deployment by 'create' command
# you could also just do kubectl get rs
kubectl get rs nginx-7bf7478b77 -o yaml 



15-
 
kubectl get po # get all the pods
# OR you can find pods directly by:
kubectl get po -l run=nginx # if you created deployment by 'run' command
kubectl get po -l app=nginx # if you created deployment by 'create' command
kubectl get po nginx-7bf7478b77-gjzp8 -o yaml




16-

kubectl rollout status deploy nginx

 
17-
 
kubectl set image deploy nginx nginx=nginx:1.7.9
OR
k edit deploy nginx # change .spec.template

18- 
kubectl rollout history deply nginx 
kubectl get deploy nginx 
kubectl get rs 
kubectl get po


19-

kubectl rollout undo deploy nginx
# wait a bit
kubectl get po # select one 'Running' Pod
kubectl describe po nginx-5ff4457d65-nslcl | grep -i image # should be nginx:1.7.8

20-

kubectl set image deploy nginx nginx=nginx:1.91
OR
kubectl edit deploy nginx


# change the image to nginx:1.91
# vim tip: type (without quotes) '/image' and Enter, to navigate quickly


21-
kubectl rollout status deploy nginx
# or
kubectl get po # you'll see 'ErrImagePull'

22-
kubectl rollout undo deploy nginx --to-revision=2
kubectl describe deploy nginx | grep Image:
kubectl rollout status deploy nginx # Everything should

23-
kubectl rollout history deploy nginx --revision=3 # You'll also see the wrong image displayed here


24-


kubectl scale deploy nginx --replicas=5
kubectl get po
kubectl describe deploy nginx

25-


kubectl autoscale deploy nginx --min=5 --max=10 --cpu-percent=80


26-
kubectl rollout pause deploy nginx

27-
kubectl set image deploy nginx nginx=nginx:1.9.1
OR
kubectl edit deploy nginx 
# Change image to nginx:1.9.1
Kubectl rollout history deploy nginx

28-
kubectl rollout resume deploy nginx
kubectl rollout history deploy nginx
kubectl rollout history deploy nginx --revision=6 # insert the number of your latest revision

29-
kubectl delete deploy nginx
kubectl delete hpa nginx

#Or
kubectl delete deploy/nginx hpa/nginx


JOBS

30-

kubectl run pi --image=perl --restart=OnFailure --perl -Mbignum=bpi -wle 'print bpi(2000)'


OR


kubectl create job pi  --image=perl -- perl -Mbignum=bpi -wle 'print bpi(2000)'


31-

kubectl get jobs -w # wait till 'SUCCESSFUL' is 1 (will take some time, perl image might be big)
kubectl get po # get the pod name
kubectl logs pi-**** # get the pi numbers
kubectl delete job pi


32-

kubectl run busybox --image=busybox --restart=OnFailure -- /bin/sh -c 'echo hello;sleep 30;echo world'

OR

kubectl create job busybox --image=busybox -- /bin/sh -c 'echo hello;sleep 30;echo world'

33-

Kubectl get pod # find the job pod
k logs busybox-0hji7 -f 
# follow logs

34-


kubectl get jobs
kubectl describe jobs busybox
kubectl logs job/busybox


35-

k delete job busybox

36-

kubectl create job busybox --image=busybox --dry-run -o yaml -- /bin/sh -c 'echo hello;sleep 30;echo world' > job_c36.yaml
vi job.yaml

--

apiVersion: batch/v1
kind: Job
metadata:
  creationTimestamp: null
  labels:
    run: busybox
  name: busybox
spec:
  completions: 5 # add this line
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: busybox
    spec:
      containers:
      - args:
        - /bin/sh
        - -c
        - echo hello;sleep 30;echo world
        image: busybox
        name: busybox
        resources: {}
      restartPolicy: OnFailure
status: {}

--

kubectl create -f job-c36.yaml

kubectl get job busybox -w # will take two and a half minutes
kubectl delete jobs busybox



37-


kubectl create job busybox --image=busybox --dry-run -o yaml -- /bin/sh -c 'echo hello;sleep 30;echo world' > job_c37.yaml
vi job.yaml

--

apiVersion: batch/v1
kind: Job
metadata:
  creationTimestamp: null
  labels:
    run: busybox
  name: busybox
spec:
  parallelism: 5 # add this line
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: busybox
    spec:
      containers:
      - args:
        - /bin/sh
        - -c
        - echo hello;sleep 30;echo world
        image: busybox
        name: busybox
        resources: {}
      restartPolicy: OnFailure
status: {}

--

kubectl create -f job_c37.yaml


k get jobs
k delete job busybox

=========

CRON JOBS

38-

kubectl run busybox --image=busybox --restart=OnFailure  --schedule="*/1 * * * *" -- /bin/sh -c 'date; echo Hello from the Kubernetes cluster'

OR


kubectl create cronjob busybox --image=busybox --schedule="*/1 * * * *" -- /bin/sh -c 'date; echo Hello from the Kubernetes cluster'


39-

kubectl get cj
kubectl get jobs --watch
kubectl get po --show-labels # observe that the pods have a label that mentions their 'parent' job
kubectl logs busybox-1529745840-m867r
# Bear in mind that Kubernetes will run a new job/pod for each new cron job
kubectl delete cj busybox


























































































































































































