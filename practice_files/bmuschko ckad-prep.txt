1- 
Core Concepts
Creating a Pod and Inspecting it
---------------------------------
 
1-
kubectl create namespace 


2- 
Configuring a Pod to Use a ConfigMap
---------------------------------------


nano config.txt
-- WRITE ----
DB_URL=localhost:3306
DB_USERNAME=postgres


kubectl create configmap db-config --from-env-file=config.txt
 kubectl run backend --image=nginx --restart=Never -o yaml --dry-run > pod.yaml
vi pod

---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: backend
  name: backend
spec:
  containers:
  - image: nginx
    name: backend
    envFrom:
      - configMapRef:
          name: db-config
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

---


 kubectl create -f pod.yaml


kubectl exec backend -it -- /bin/sh


# env | grep DB
DB_URL=localhost:3306
DB_USERNAME=postgres



3-

Configuring a Pod to Use a Secret

------------

kubectl create secret generic db-credentials --from-literal=db-password=passwd
 
kubectl get secrets

kubectl run backend --image=nginx --restart=Never -o yaml --dry-run > pod.yaml

---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: backend
  name: backend
spec:
  containers:
  - image: nginx
    name: backend
    env:
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db-credentials
            key: db-password
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
---


kubectl create -f pod.yaml

kubectl exec -it backend -- /bin/sh

# env | grep DB
DB_PASSWORD=passwd
# exit

===

4- Creating a Security Context for a Pod

---------------------------------------------

$ kubectl run secured --image=nginx --restart=Never -o yaml --dry-run > secured.yaml


--

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: secured
  name: secured
spec:
  securityContext:
    fsGroup: 3000
  containers:
  - image: nginx
    name: secured
    volumeMounts:
    - name: data-vol
      mountPath: /data/app
    resources: {}
  volumes:
  - name: data-vol
    emptyDir: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

---

$ kubectl create -f secured.yaml
pod/secured created
$ kubectl exec -it secured -- sh
/ # cd /data/app
/ # touch logs.txt
/ # ls -l
-rw-r--r-- 1 root 3000 0 Mar 11 15:56 logs.txt
/ # exit



4 - Defining a Podâ€™s Resource Requirements
-------------------------------------------


--rq.yaml


apiVersion: v1
kind: ResourceQuota
metadata:
  name: app
spec:
  hard:
    pods: "2"
    requests.cpu: "2"
    requests.memory: 500m

---


 kubectl create namespace rq-demo
kubectl create -f rq.yaml --namespace=rq-demo

kubectl describe quota --namespace=rq-demo


pod.yaml


---

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: mypod
  name: mypod
spec:
  containers:
  - image: nginx
    name: mypod
    resources:
      requests:
        memory: "1G"
        cpu: "400m"
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

---
kubectl create -f pod.yaml --namespace=rq-demo


-
Error from server (Forbidden): error when creating "2b4_pod.yaml": pods "mypod" is forbidden: exceeded quota: app, requested: requests.memory=1G, used: requests.memory=0, limited: requests.memory=500m
-













































